/**
 * File:	include/controller/dialogs.ycp
 * Package:	Configuration of controller
 * Summary:	Dialogs definitions
 * Authors:	Jiri Srain <jsrain@suse.cz>
 *
 * $Id$
 */

{

textdomain "s390";

import "Arch";
import "DASDController";
import "Label";
import "Mode";
import "Popup";
import "Progress";
import "Report";
import "Sequencer";
import "Wizard";

include "s390/dasd/helps.ycp";

/**
 * List DASD devices that are currently being selected
 * @return list<integer> list of IDs of selected DASD devices
 */
define list<integer> ListSelectedDASD () ``{
    map<integer, boolean> sel_list = (map<integer, boolean>)filter (
	integer k, boolean v, DASDController::selected,
    ``(
	v == true
    ));
    list<integer> to_activate = maplist (integer k, boolean v, sel_list, ``(k));
    y2milestone ("Selected list: %1", to_activate);
    return to_activate;
}


// --------------------------------------------------------------------------




// now real dialogs

/**
 * Read settings dialog
 * @return `abort if aborted and `next otherwise
 */
symbol ReadDialog() {
    Wizard::RestoreHelp(DASD_HELPS["read"]:"");
    // Controller::AbortFunction = PollAbort;
    boolean ret = DASDController::Read();
    return ret ? `next : `abort;
}

/**
 * Write settings dialog
 * @return `abort if aborted and `next otherwise
 */
symbol WriteDialog() {
    Wizard::RestoreHelp(DASD_HELPS["write"]:"");
    // Controller::AbortFunction = PollAbort;
    boolean ret = DASDController::Write();
    return ret ? `next : `abort;
}

/**
 * Get the list of items for the table of DASD devices
 * @param min_chan integer minimal channel number
 * @param max_chan integer maximal channel number
 * @return a list of terms for the table
 */
define list<term> GetDASDDiskItems(string min_channel, string max_channel) ``{
    integer id = 0;

    list<term> items = [];

    integer min_css = tointeger(substring (min_channel, 0, 1));
    integer min_lcss = tointeger(sformat("0x%1",substring (min_channel, 2, 1)));
    integer min_chan = tointeger(sformat("0x%1",substring (min_channel, 4, 4)));

    integer max_css = tointeger(substring (max_channel, 0, 1));
    integer max_lcss = tointeger(sformat("0x%1",substring (max_channel, 2, 1)));
    integer max_chan = tointeger(sformat("0x%1",substring (max_channel, 4, 4)));

    map<integer,map<string,any> > devices = DASDController::devices;

    if (min_chan > 0 || min_lcss > 0 || min_css > 0 ||
        max_chan < 0xffff || max_lcss < 0xf || max_css < 0xf)
    {
        y2milestone ("Filter disks: %1.%2.%3 to %4.%5.%6",
		    min_css, min_lcss, min_chan,
		    max_css, max_lcss, max_chan);

	devices = (map<integer,map<string,any> >)filter (
	    integer k, map<string,any> d, devices,
        ``{
	    string channel = d["channel"]:"0.0.0000";
	    integer tmp_css = tointeger(substring (channel, 0, 1));
	    integer tmp_lcss = tointeger(sformat("0x%1",substring (channel, 2, 1)));
	    integer tmp_chan = tointeger(sformat("0x%1",substring (channel, 4, 4)));

	    return (tmp_css >= min_css && tmp_lcss >= min_lcss && tmp_chan >= min_chan 
		   && tmp_css <= max_css && tmp_lcss <= max_lcss && tmp_chan <= max_chan);
	});
    }

    y2milestone ("Current disks: %1", devices);

    if (Mode::config ())
    {
	items = (list<term>) maplist (integer k, map<string,any> d, devices, {
	    string channel = d["channel"]:"";
	    string diag = d["diag"]:false
		// table cell
		? _("Yes")
		// table cell
		: _("No");
	    string format = d["format"]:false
		// table cell
		? _("Yes")
		// table cell
		: _("No");
	    return `item (`id (k), channel, format, diag);
	});
	return items;
    }

    items = (list<term>) maplist (integer k, map<string,any> d, devices, ``{
	boolean active = (boolean)(d["resource", "io", 0, "active"]:false);
	integer channel = (integer)(d["resource", "io", 0, "start"]:0);
	string str_channel = (string)(d["channel"]:"");
	string access = toupper ((string)(d["resource", "io", 0, "mode"]:"RO"));
	string diag = DASDController::diag[str_channel]:false
	    // table cell
	    ? _("Yes")
	    // table cell
	    : _("No");
	string device = d["dev_name"]:"";
	string type = toupper (sformat ("%1/%2, %3/%4",
	    substring (
		DASDController::FourDigitHex (
		    d["device_id"]:0 & tointeger ("0xffff")
		),
		2),
	    substring (
		DASDController::FourDigitHex (d["detail", "cu_model"]:0),
		4),
	    substring (
		DASDController::FourDigitHex (
		    d["sub_device_id"]:0 & tointeger ("0xffff")
		),
		2),
	    substring (
		DASDController::FourDigitHex (d["detail", "dev_model"]:0),
		4)
	));

	string formatted = (boolean)d["formatted"]:false
		// table cell
		? _("Yes")
		// table cell
		: _("No");
	string partition_info = d["partition_info"]:"--";
	boolean activate = d["activate"]:false;

	string selected = DASDController::selected[k]:false
	    // table cell
	    ? _("Yes")
	    : "-";

	if (!active) {
	    type = "--";
	    access = "--";
	    formatted = "--";
	    partition_info = "--";
	    device = "--";
	}

	term t = `item (`id (k), selected, str_channel, device,
	    type ,access);
	t = add (t, diag);
	t = add (t, formatted);
	t = add (t, partition_info);
	return t;
    });
    return items;
}

/**
 * Draw the DASD dialog
 */
define void DisplayDASDDialog() {

    string help_key = Mode::config ()
	? "disk_selection_config"
	: "disk_selection";

    /* Minimal text for the help */
    string help = DASD_HELPS[help_key]:"";

    /* Dialog caption */
    string caption = _("DASD Disk Management");

    term header = `header(
    // table header
	_("Sel."),
	// table header
	`Right(_("Channel")),
	// table header
	_("Device"),
	// table header
	_("Type"),
	// table header
	_("Access Type"),
	// table header
	_("Use DIAG"));
    // table header
    header = add (header, _("Formatted"));
    // table header
    header = add (header, _("Partition Information"));

    if (Mode::config ())
    {
	header = `header(
	    // table header
	    `Right(_("Channel")),
	    // table header
	    _("Format"),
	    // table header
	    _("Use DIAG")
	);
    }

    list actions = [
	// menuy button id
	`item (`id (`activate), _("&Activate")),
	// menuy button id
	`item (`id(`deactivate), _("&Deactivate")),
    ];
    // menuy button id
    actions = add (actions, `item (`id(`diag_on), _("Set DIAG O&n")));
    // menuy button id
    actions = add (actions, `item (`id(`diag_off), _("Set DIAG O&ff")));

    // menuy button id
    actions = add (actions, `item (`id(`format), _("&Format")));

    /* Dialog content */
    term content = `VBox(
	`HBox(
	    // text entry
	    `InputField(`id(`min_chan), `opt(`hstretch), _("Mi&nimum Channel"), "0.0.0000"),
	    // text entry
	    `InputField(`id(`max_chan), `opt(`hstretch), _("Ma&ximum Channel"), "0.f.ffff"),
	    `VBox (
		`Label (""),
		// push button
		`PushButton (`id (`filter), _("&Filter"))
	    )
	),
	`Table(`id(`table), `opt (`notify), header, []),
	Mode::config ()
	    ? `HBox (
		// push button
		`PushButton (`id (`add), _("A&dd New Disk")),
		// push button
		`PushButton (`id (`delete), _("De&lete Disk")),
		`HStretch ()
	    )
	    : `HBox (
		// pudh button
		`PushButton (`id (`select), _("&Select or Deselect")),
		`HStretch (),
		// menu button
		`MenuButton (`id (`operation), _("Perform &Action"), actions)
	    )
    );

    /* Apply the settings */
    Wizard::SetContents(caption, content, help, true, true);
    Wizard::HideBackButton();
    Wizard::SetAbortButton(`abort, Label::CancelButton() );
}


/**
 * Redraw the contents of the widgets in the DASD Dialog
 */
define void ReloadDASDDialog () ``{
    DASDController::filter_min = (string)
	UI::QueryWidget(`min_chan, `Value);
    DASDController::filter_max = (string)
	UI::QueryWidget(`max_chan, `Value);

    if (!Mode::config())
    {
	DASDController::ProbeDisks ();
    }

    list<term> items = GetDASDDiskItems (
	       DASDController::filter_min,
	       DASDController::filter_max);

    UI::ChangeWidget(`id(`table), `Items, items);
    UI::SetFocus (`table);
}

/**
 * Run the dialog for DASD disks configuration
 * @return symbol for wizard sequencer
 */
symbol DASDDialog()
{
    DisplayDASDDialog ();
    ReloadDASDDialog ();
    any ret = nil;

    while (ret == nil)
    {
	ret = UI::UserInput();

	integer selected = (integer) UI::QueryWidget(`id(`table), `CurrentItem);

	if (ret == `filter) {
	    ReloadDASDDialog ();
	    ret = nil;
	    continue;
	}
	else if (ret == `table || ret == `select)
	{
	    DASDController::selected[selected]
		= ! DASDController::selected[selected]:false;
	    UI::ChangeWidget (`id (`table), `Item (selected, 0),
		DASDController::selected[selected]:false
		    // table cell
		    ? _("Yes")
		    : "-");
	    ret = nil;
	    UI::SetFocus (`table);
	    continue;
	}
	else if (ret == `activate)
	{
	    list<integer>to_activate = ListSelectedDASD ();
	    if (0 == size (to_activate))
	    {
		Popup::Message (_("No disk selected."));
		ret = nil;
		continue;
	    }
	    foreach (integer id, to_activate, ``{
		string channel = DASDController::devices[id,"channel"]:"";
		boolean diag = DASDController::diag[channel]:false;
		DASDController::ActivateDisk (
		    channel,
		    diag
		);
	    });

	    ReloadDASDDialog ();

//	    UI::ChangeWidget(`id(`table), `CurrentItem, ids_to_activate[0]:nil);
	    ret = nil;

	}
	else if (ret == `deactivate)
	{
	    list<integer>to_activate = ListSelectedDASD ();
	    if (0 == size (to_activate))
	    {
		// error popup message
		Popup::Message (_("No disk selected."));
		ret = nil;
		continue;
	    }
	    foreach (integer id, to_activate, ``{
		string channel = DASDController::devices[id,"channel"]:"";
		boolean diag = DASDController::diag[channel]:false;
		DASDController::DeactivateDisk (
		    channel,
		    diag
		);
	    });

	    ReloadDASDDialog ();

//	    UI::ChangeWidget(`id(`table), `CurrentItem, ids_to_activate[0]:nil);
	    ret = nil;
	}
	else if (ret == `diag_on)
	{
	    list<integer> selected = ListSelectedDASD();
	    if (isempty(selected))
	    {
		// error popup message
		Popup::Message (_("No disk selected."));
		ret = nil;
		continue;
	    }

	    foreach (integer id, selected, {
		string channel = DASDController::devices[id, "channel"]:"";
		boolean active = DASDController::devices[id, "resource", "io", 0, "active"]:false;
		DASDController::diag[channel] = true;
		if (active)
		    DASDController::ActivateDisk(channel, true);
	    });

	    ReloadDASDDialog ();

//	    UI::ChangeWidget(`id(`table), `CurrentItem, ids_to_activate[0]:nil);
	    ret = nil;
	}
	else if (ret == `diag_off)
	{
	    list<integer> selected = ListSelectedDASD();
	    if (isempty(selected))
	    {
		// error popup message
		Popup::Message (_("No disk selected."));
		ret = nil;
		continue;
	    }

	    foreach (integer id, selected, {
		string channel = DASDController::devices[id, "channel"]:"";
		boolean active = DASDController::devices[id, "resource", "io", 0, "active"]:false;
		DASDController::diag[channel] = false;
		if (active)
		    DASDController::ActivateDisk(channel, false);
	    });

	    ReloadDASDDialog ();

//	    UI::ChangeWidget(`id(`table), `CurrentItem, ids_to_activate[0]:nil);
	    ret = nil;
	}
	else if (ret == `format)
	{
	    list<integer>to_activate = ListSelectedDASD ();
	    if (0 == size (to_activate))
	    {
		Popup::Message (_("No disk selected."));
		ret = nil;
		continue;
	    }
	    // check if disks are R/W and active
	    string problem = "";
	    foreach (integer id, to_activate, {
		boolean active = (boolean)
		    (DASDController::devices[id, "resource", "io", 0, "active"]:false);
		string access = toupper (
		    (string)(DASDController::devices[id, "resource", "io", 0, "mode"]:"RO"));
		if (! active)
		{
		    // error report, %1 is device identification
		    problem = sformat (_("Disk %1 is not active."),
			DASDController::devices[id, "channel"]:"");
		}
		else if (tolower (access) != "rw")
		{
		    problem = sformat (
			// error report, %1 is device identification
			_("Disk %1 is not accessible for writing."),
			DASDController::devices[id, "channel"]:"");
		}
	    });
	    if (problem != "")
	    {
		Popup::Message (problem);
		ret = nil;
		continue;
	    }
	    integer par = 8;
	    if (par > size (to_activate))
		par = size (to_activate);
	    boolean cancel = false;
	    UI::OpenDialog (`VBox (
		`IntField (`id (`par),
		    // integer field (count of disks formatted at parallely)
		    _("&Parallel Formatted Disks"), 1, par, par),
		`HBox (
		    `HStretch (),
		    `PushButton (`id (`ok), Label::OKButton ()),
		    `PushButton (`id (`cancel), Label::CancelButton ()),
		    `HStretch ()
		)
	    ));
	    ret = UI::UserInput ();
	    par = (integer)UI::QueryWidget (`id (`par), `Value);
	    UI::CloseDialog ();
	    if (ret == `cancel)
	    {
		UI::SetFocus (`table);
		ret = nil;
		continue;
	    }

	    // final confirmation before formatting the discs
	    list<string> channels = maplist (integer id, to_activate, {
		return DASDController::devices[id, "channel"]:"";
	    });
	    string channels_str = mergestring (channels, ", ");
	    if (! Popup::AnyQuestionRichText (
		Popup::NoHeadline (),
		// popup question
		sformat (_("Formatting these disks destroys all data on them.<br>
Really format the following disks?<br>
%1"),
		    channels_str),
		60,
		20,
		Label::YesButton (),
		Label::NoButton (),
		`focus_no
	    ))
	    {
		UI::SetFocus (`table);
		ret = nil;
		continue;
	    }
	    // final confirmation -- end

	    list<string> devices = maplist (integer id, to_activate, ``{
		return DASDController::devices[id, "dev_name"]:"";
	    });
	    DASDController::FormatDisks (devices, par);
	    ReloadDASDDialog ();
	    UI::SetFocus (`table);
	    ret = nil;
	}
    }
    return (symbol)ret;
}

/**
 * Run the dialog for adding DASDs
 * @return symbol from AddDASDDiskDialog
 */
define symbol AddDASDDiskDialog () ``{
    if (! Mode::config ())
    {
	y2error ("DASD Add Disk dialog shouldn't be run in Mode::config ()");
	return `back;
    }

    /* Minimal text for the help */
    string help = DASD_HELPS["disk_add_config"]:"";

    /* Dialog caption */
    string caption = _("Add New DASD Disk");

    /* Dialog content */
    term content = `HBox (`HStretch (), `VBox(
	`VStretch (),
	`TextEntry (`id(`channel), `opt (`hstretch),
	    // text entry
	    _("&Channel Number")
	),
	`VSpacing (2),
	// check box
	`Left (`CheckBox (`id (`format), _("Format the Disk"))),
	`VSpacing (2),
	// check box
	`Left (`CheckBox (`id (`diag), _("Use &DIAG"))),
	`VStretch ()
    ), `HStretch ());

    /* Apply the settings */
    Wizard::SetContents(caption, content, help, true, true);
    Wizard::RestoreBackButton ();
    Wizard::RestoreAbortButton ();

    any ret = nil;

    while (ret == nil)
    {
	ret = UI::UserInput();

	if (ret == `abort || ret == `cancel)
	{
	    // yes-no popup
	    if (! Popup::YesNo (_("Really leave the ZFCP disk configuration without saving?
All changes will be lost.")))
	    {
		ret = nil;
	    }
	}
    }

    if (ret == `next)
    {
	string channel = (string)UI::QueryWidget (`id (`channel), `Value);
	boolean format = (boolean)UI::QueryWidget (`id (`format), `Value);
	boolean diag = (boolean)UI::QueryWidget (`id (`diag), `Value);
	map<string,any> m = $[
	    "channel" : channel,
	    "format" : format,
	    "diag" : diag,
	];
	integer index = 0;
	while (haskey (DASDController::devices, index))
	    index = index + 1;
	DASDController::devices[index] = m;
    }

    return (symbol) ret;

}


// EOF
}

